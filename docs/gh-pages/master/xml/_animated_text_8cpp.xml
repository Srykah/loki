<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_animated_text_8cpp" kind="file" language="C++">
    <compoundname>AnimatedText.cpp</compoundname>
    <includes refid="_animated_text_8hpp" local="yes">AnimatedText.hpp</includes>
    <includes local="no">SFML/Graphics/RenderTarget.hpp</includes>
    <includes refid="_iter_adapters_8hpp" local="no">loki/common/IterAdapters.hpp</includes>
    <incdepgraph>
      <node id="32">
        <label>Time.hpp</label>
        <link refid="_time_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/text/AnimatedText.cpp</label>
        <link refid="_animated_text_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>filesystem</label>
      </node>
      <node id="28">
        <label>Optional.hpp</label>
        <link refid="_optional_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>SFML/Graphics/Transformable.hpp</label>
      </node>
      <node id="21">
        <label>charconv</label>
      </node>
      <node id="15">
        <label>SFML/Graphics/Transform.hpp</label>
      </node>
      <node id="20">
        <label>AnimationData.hpp</label>
        <link refid="_animation_data_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Stylesheet.hpp</label>
        <link refid="_stylesheet_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>string</label>
      </node>
      <node id="11">
        <label>AnimatedTextStyle.hpp</label>
        <link refid="_animated_text_style_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>TextAnimationViewData.hpp</label>
        <link refid="_text_animation_view_data_8hpp_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>AnimatedText.hpp</label>
        <link refid="_animated_text_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>SFML/System/Vector2.hpp</label>
      </node>
      <node id="10">
        <label>SFML/System/String.hpp</label>
      </node>
      <node id="30">
        <label>Rect.hpp</label>
        <link refid="json_2_rect_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>SFML/Graphics/VertexArray.hpp</label>
      </node>
      <node id="24">
        <label>Keyframe.hpp</label>
        <link refid="_keyframe_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>Color.hpp</label>
        <link refid="json_2_color_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>SFML/Graphics/Drawable.hpp</label>
      </node>
      <node id="33">
        <label>Vector2.hpp</label>
        <link refid="json_2_vector2_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>loki/styles/TextStyle.hpp</label>
        <link refid="_text_style_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>loki/common/IterAdapters.hpp</label>
        <link refid="_iter_adapters_8hpp"/>
      </node>
      <node id="25">
        <label>loki/json/All.hpp</label>
        <link refid="json_2_all_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>loki/anim/AnimationViewData.hpp</label>
        <link refid="_animation_view_data_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>loki/math/Interpolate.hpp</label>
        <link refid="_interpolate_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>SFML/Graphics/Color.hpp</label>
      </node>
      <node id="29">
        <label>optional</label>
      </node>
      <node id="23">
        <label>impl/Interpolate.hxx</label>
        <link refid="_interpolate_8hxx"/>
      </node>
      <node id="36">
        <label>SFML/Graphics/Glyph.hpp</label>
      </node>
      <node id="16">
        <label>loki/common/Vector4.hpp</label>
        <link refid="_vector4_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>impl/Vector4.hxx</label>
        <link refid="_vector4_8hxx"/>
      </node>
      <node id="18">
        <label>SFML/Graphics/Rect.hpp</label>
      </node>
      <node id="39">
        <label>SFML/Graphics/RenderTarget.hpp</label>
      </node>
      <node id="37">
        <label>loki/common/VertexArrayIterator.hpp</label>
        <link refid="_vertex_array_iterator_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>SFML/Graphics/Text.hpp</label>
      </node>
      <node id="31">
        <label>String.hpp</label>
        <link refid="_string_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="6">
        <label>SFML/System/Time.hpp</label>
      </node>
      <node id="35">
        <label>impl/AnimatedGlyph.hpp</label>
        <link refid="_animated_glyph_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceloki">loki</innernamespace>
    <innernamespace refid="namespaceloki_1_1text">loki::text</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Srykah </para>
</simplesect>
<simplesect kind="copyright"><para>GNU GPL v3.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_animated_text_8hpp" kindref="compound">AnimatedText.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SFML/Graphics/RenderTarget.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_iter_adapters_8hpp" kindref="compound">loki/common/IterAdapters.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">loki::text<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">AnimatedText::AnimatedText(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::String&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AnimatedTextStyle&amp;<sp/>style)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">:<sp/>string(string)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">,<sp/>style(style)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">,<sp/>vertices(sf::Triangles)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>init();</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnimatedText::update(sf::Time<sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>elapsedTime<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>[i,<sp/>glyph]<sp/>:<sp/>common::enumerate(glyphs))<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(style.appear.has_value())<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sf::Time<sp/>startingPoint<sp/>=<sp/>float(i)<sp/>*<sp/>style.appear-&gt;dt;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(skippingMoment<sp/>!=<sp/>sf::Time::Zero)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startingPoint<sp/>=<sp/>std::min(startingPoint,<sp/>skippingMoment);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elapsedTime<sp/>-<sp/>startingPoint<sp/>&lt;=<sp/>style.appear-&gt;getDuration())<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glyph.updateVertices(</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.appear-&gt;getTransform(elapsedTime<sp/>-<sp/>startingPoint),</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.appear-&gt;getColor(elapsedTime<sp/>-<sp/>startingPoint));</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(style.animation.has_value())<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sf::Time<sp/>startingPoint<sp/>=<sp/>float(i)<sp/>*<sp/>style.animation-&gt;dt;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>glyph.updateVertices(</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.animation-&gt;getTransform(elapsedTime<sp/>-<sp/>startingPoint),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.animation-&gt;getColor(elapsedTime<sp/>-<sp/>startingPoint));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnimatedText::draw(sf::RenderTarget&amp;<sp/>target,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::RenderStates<sp/>states)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>states.transform<sp/>*=<sp/>getTransform();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>states.texture<sp/>=<sp/>&amp;style.font.value()-&gt;getTexture(style.characterSize.value());</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>target.draw(vertices,<sp/>states);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnimatedText::skip()<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>skippingMoment<sp/>=<sp/>elapsedTime;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnimatedText::init()<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>font<sp/>=<sp/>*style.font.value();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>charSize<sp/>=<sp/>style.characterSize.value_or(30);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isBold<sp/>=<sp/>style.characterStyle.value_or(sf::Text::Regular)<sp/>|<sp/>sf::Text::Bold;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>sf::Uint32<sp/>lastChar;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.getSize();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>c<sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[i];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>font.getKerning(lastChar,<sp/>c,<sp/>charSize);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>lastChar<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>glyph<sp/>=<sp/>font.getGlyph(c,<sp/>charSize,<sp/>isBold);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.resize(vertices.getVertexCount()<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>glyphs.emplace_back(glyph,<sp/>style,<sp/>begin(vertices)<sp/>+<sp/>6<sp/>*<sp/>i,<sp/>x);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>glyph.advance;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">sf::FloatRect<sp/>AnimatedText::getLocalBounds()<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sf::FloatRect();</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/prog/cpp/custom_libs/loki/src/loki/text/AnimatedText.cpp"/>
  </compounddef>
</doxygen>
