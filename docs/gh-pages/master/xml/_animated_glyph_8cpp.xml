<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_animated_glyph_8cpp" kind="file" language="C++">
    <compoundname>AnimatedGlyph.cpp</compoundname>
    <includes refid="_animated_glyph_8hpp" local="yes">AnimatedGlyph.hpp</includes>
    <incdepgraph>
      <node id="32">
        <label>Time.hpp</label>
        <link refid="_time_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Optional.hpp</label>
        <link refid="_optional_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>SFML/Graphics/Transformable.hpp</label>
      </node>
      <node id="20">
        <label>charconv</label>
      </node>
      <node id="13">
        <label>SFML/Graphics/Transform.hpp</label>
      </node>
      <node id="18">
        <label>AnimationData.hpp</label>
        <link refid="_animation_data_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>string</label>
      </node>
      <node id="7">
        <label>../AnimatedTextStyle.hpp</label>
        <link refid="_animated_text_style_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>TextAnimationViewData.hpp</label>
        <link refid="_text_animation_view_data_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>SFML/System/Vector2.hpp</label>
      </node>
      <node id="31">
        <label>SFML/System/String.hpp</label>
      </node>
      <node id="29">
        <label>Rect.hpp</label>
        <link refid="json_2_rect_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>SFML/Graphics/VertexArray.hpp</label>
      </node>
      <node id="23">
        <label>Keyframe.hpp</label>
        <link refid="_keyframe_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>Color.hpp</label>
        <link refid="json_2_color_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>Vector2.hpp</label>
        <link refid="json_2_vector2_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>loki/styles/TextStyle.hpp</label>
        <link refid="_text_style_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>loki/json/All.hpp</label>
        <link refid="json_2_all_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>loki/anim/AnimationViewData.hpp</label>
        <link refid="_animation_view_data_8hpp_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>loki/math/Interpolate.hpp</label>
        <link refid="_interpolate_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>SFML/Graphics/Color.hpp</label>
      </node>
      <node id="28">
        <label>optional</label>
      </node>
      <node id="22">
        <label>impl/Interpolate.hxx</label>
        <link refid="_interpolate_8hxx"/>
      </node>
      <node id="3">
        <label>SFML/Graphics/Glyph.hpp</label>
      </node>
      <node id="14">
        <label>loki/common/Vector4.hpp</label>
        <link refid="_vector4_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>impl/Vector4.hxx</label>
        <link refid="_vector4_8hxx"/>
      </node>
      <node id="16">
        <label>SFML/Graphics/Rect.hpp</label>
      </node>
      <node id="1">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/text/impl/AnimatedGlyph.cpp</label>
        <link refid="_animated_glyph_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>loki/common/VertexArrayIterator.hpp</label>
        <link refid="_vertex_array_iterator_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>SFML/Graphics/Text.hpp</label>
      </node>
      <node id="30">
        <label>String.hpp</label>
        <link refid="_string_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="19">
        <label>SFML/System/Time.hpp</label>
      </node>
      <node id="2">
        <label>AnimatedGlyph.hpp</label>
        <link refid="_animated_glyph_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceloki">loki</innernamespace>
    <innernamespace refid="namespaceloki_1_1text">loki::text</innernamespace>
    <innernamespace refid="namespaceloki_1_1text_1_1impl">loki::text::impl</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Srykah </para>
</simplesect>
<simplesect kind="copyright"><para>GNU GPL v3.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_animated_glyph_8hpp" kindref="compound">AnimatedGlyph.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">loki::text::impl<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">AnimatedGlyph::AnimatedGlyph(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Glyph&amp;<sp/>glyph,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AnimatedTextStyle&amp;<sp/>style,</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common::VertexArrayIterator<sp/>vaIt,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">:<sp/>style(style)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">,<sp/>vaIt(vaIt)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>initBasePos(glyph,<sp/>x);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>initTexRect(glyph);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(style.appear.has_value())<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>updateVertices(style.appear-&gt;getTransform(sf::Time::Zero),</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.appear-&gt;getColor(sf::Time::Zero));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>updateVertices(sf::Transform::Identity,<sp/>sf::Color::White);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnimatedGlyph::initBasePos(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Glyph&amp;<sp/>glyph,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>padding<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>shear<sp/>=<sp/>(style.characterStyle.value_or(sf::Text::Regular)<sp/>&amp;<sp/>sf::Text::Italic)<sp/>?<sp/>0.209f<sp/>:<sp/>0.f;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>glyph.bounds.left<sp/>-<sp/>padding;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>glyph.bounds.top<sp/>-<sp/>padding;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>glyph.bounds.left<sp/>+<sp/>glyph.bounds.width<sp/>+<sp/>padding;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>glyph.bounds.top<sp/>+<sp/>glyph.bounds.height<sp/>+<sp/>padding;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>basePos[0]<sp/>=<sp/>sf::Vector2f(x<sp/>+<sp/>left<sp/>-<sp/>shear<sp/>*<sp/>top,<sp/>top);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>basePos[1]<sp/>=<sp/>sf::Vector2f(x<sp/>+<sp/>right<sp/>-<sp/>shear<sp/>*<sp/>top,<sp/>top);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>basePos[2]<sp/>=<sp/>sf::Vector2f(x<sp/>+<sp/>left<sp/>-<sp/>shear<sp/>*<sp/>bottom,<sp/>bottom);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>basePos[3]<sp/>=<sp/>sf::Vector2f(x<sp/>+<sp/>left<sp/>-<sp/>shear<sp/>*<sp/>bottom,<sp/>bottom);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>basePos[4]<sp/>=<sp/>sf::Vector2f(x<sp/>+<sp/>right<sp/>-<sp/>shear<sp/>*<sp/>top,<sp/>top);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>basePos[5]<sp/>=<sp/>sf::Vector2f(x<sp/>+<sp/>right<sp/>-<sp/>shear<sp/>*<sp/>bottom,<sp/>bottom);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnimatedGlyph::initTexRect(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Glyph&amp;<sp/>glyph)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>padding<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>u1<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(glyph.textureRect.left)<sp/>-<sp/>padding;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v1<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(glyph.textureRect.top)<sp/>-<sp/>padding;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>u2<sp/>=</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(glyph.textureRect.left<sp/>+<sp/>glyph.textureRect.width)<sp/>+</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>padding;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v2<sp/>=</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(glyph.textureRect.top<sp/>+<sp/>glyph.textureRect.height)<sp/>+</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>padding;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>(vaIt<sp/>+<sp/>0)-&gt;texCoords<sp/>=<sp/>sf::Vector2f(u1,<sp/>v1);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>(vaIt<sp/>+<sp/>1)-&gt;texCoords<sp/>=<sp/>sf::Vector2f(u2,<sp/>v1);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>(vaIt<sp/>+<sp/>2)-&gt;texCoords<sp/>=<sp/>sf::Vector2f(u1,<sp/>v2);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>(vaIt<sp/>+<sp/>3)-&gt;texCoords<sp/>=<sp/>sf::Vector2f(u1,<sp/>v2);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>(vaIt<sp/>+<sp/>4)-&gt;texCoords<sp/>=<sp/>sf::Vector2f(u2,<sp/>v1);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>(vaIt<sp/>+<sp/>5)-&gt;texCoords<sp/>=<sp/>sf::Vector2f(u2,<sp/>v2);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnimatedGlyph::updateVertices(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Transform&amp;<sp/>transform,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Color&amp;<sp/>_color)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i{0};<sp/>i<sp/>&lt;<sp/>6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>(vaIt<sp/>+<sp/>i)-&gt;color<sp/>=<sp/>style.fillColor.value_or(sf::Color::White)<sp/>*<sp/>_color;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>(vaIt<sp/>+<sp/>i)-&gt;position<sp/>=<sp/>transform.transformPoint(basePos[i]);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*void<sp/>AnimatedGlyph::update(sf::Time<sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/>if<sp/>(playing)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/>elapsedTime<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(appearing<sp/>&amp;&amp;<sp/>!disappearing<sp/>&amp;&amp;<sp/>style.appear.has_value())<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>sf::Time&amp;<sp/>appearDuration<sp/>=<sp/>style.appear-&gt;getDuration();</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(elapsedTime<sp/>&gt;=<sp/>appearDuration)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateVertices(</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.appear-&gt;getTransform(appearDuration),</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.appear-&gt;getColor(appearDuration));</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elapsedTime<sp/>-=<sp/>appearDuration;</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>appearing<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateVertices(</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.appear-&gt;getTransform(elapsedTime),</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.appear-&gt;getColor(elapsedTime));</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!appearing<sp/>&amp;&amp;<sp/>!disappearing<sp/>&amp;&amp;<sp/>style.animation.has_value())<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>sf::Time&amp;<sp/>animationDuration<sp/>=<sp/>style.animation-&gt;getDuration();</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(elapsedTime<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elapsedTime<sp/>&gt;=<sp/>animationDuration;</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elapsedTime<sp/>-=<sp/>animationDuration);</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>updateVertices(</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.animation-&gt;getTransform(elapsedTime),</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.animation-&gt;getColor(elapsedTime));</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(disappearing<sp/>&amp;&amp;<sp/>style.disappear.has_value())<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>sf::Time&amp;<sp/>disappearDuration<sp/>=<sp/>style.appear-&gt;getDuration();</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(elapsedTime<sp/>&gt;=<sp/>disappearDuration)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateVertices(</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.disappear-&gt;getTransform(disappearDuration),</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.appear-&gt;getColor(disappearDuration));</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elapsedTime<sp/>=<sp/>sf::Time::Zero;</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>playing<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateVertices(</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.disappear-&gt;getTransform(elapsedTime),</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.disappear-&gt;getColor(elapsedTime));</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="comment">}</highlight></codeline>
<codeline lineno="114"><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment">void<sp/>AnimatedGlyph::appear()<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/>appearing<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="117"><highlight class="comment">}</highlight></codeline>
<codeline lineno="118"><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment">bool<sp/>AnimatedGlyph::isAppearing()<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/>return<sp/>appearing;</highlight></codeline>
<codeline lineno="121"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>loki::text::impl</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/prog/cpp/custom_libs/loki/src/loki/text/impl/AnimatedGlyph.cpp"/>
  </compounddef>
</doxygen>
