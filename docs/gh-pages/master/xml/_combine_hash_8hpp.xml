<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_combine_hash_8hpp" kind="file" language="C++">
    <compoundname>CombineHash.hpp</compoundname>
    <includes local="no">functional</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="_iter_hash_8hpp" local="yes">D:/prog/cpp/custom_libs/loki/src/loki/hash/IterHash.hpp</includedby>
    <includedby refid="_pair_hash_8hpp" local="yes">D:/prog/cpp/custom_libs/loki/src/loki/hash/PairHash.hpp</includedby>
    <includedby refid="_tuple_hash_8hpp" local="yes">D:/prog/cpp/custom_libs/loki/src/loki/hash/TupleHash.hpp</includedby>
    <includedby refid="hash_2_all_8hpp" local="yes">D:/prog/cpp/custom_libs/loki/src/loki/hash/All.hpp</includedby>
    <includedby refid="_signal_8hpp" local="no">D:/prog/cpp/custom_libs/loki/src/loki/screens/Signal.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>functional</label>
      </node>
      <node id="3">
        <label>type_traits</label>
      </node>
      <node id="1">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/hash/CombineHash.hpp</label>
        <link refid="_combine_hash_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/screens/ScreenStack.hpp</label>
        <link refid="_screen_stack_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/hash/PairHash.hpp</label>
        <link refid="_pair_hash_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/screens/Signal.hpp</label>
        <link refid="_signal_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/hash/IterHash.hpp</label>
        <link refid="_iter_hash_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/hash/All.hpp</label>
        <link refid="hash_2_all_8hpp"/>
      </node>
      <node id="7">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/screens/Screen.hpp</label>
        <link refid="_screen_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/screens/ScreenStack.cpp</label>
        <link refid="_screen_stack_8cpp"/>
      </node>
      <node id="8">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/screens/Screen.cpp</label>
        <link refid="_screen_8cpp"/>
      </node>
      <node id="9">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/screens/All.hpp</label>
        <link refid="screens_2_all_8hpp"/>
      </node>
      <node id="5">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/hash/TupleHash.hpp</label>
        <link refid="_tuple_hash_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/hash/CombineHash.hpp</label>
        <link refid="_combine_hash_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceloki">loki</innernamespace>
    <innernamespace refid="namespaceloki_1_1hash">loki::hash</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">loki::hash<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">constexpr<sp/>std::size_t<sp/>combineHashImpl(std::size_t<sp/>seed)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seed;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">std::size_t<sp/>combineHashImpl(std::size_t<sp/>seed,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>combineHashImpl(</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>^<sp/>std::hash&lt;T&gt;()(val)<sp/>+<sp/>0x9E3779B97F4A7C15<sp/>+<sp/>(seed<sp/>&lt;&lt;<sp/>6u)<sp/>+<sp/>(seed<sp/>&gt;&gt;<sp/>2u),</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args...);</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">std::size_t<sp/>combineHash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>combineHashImpl(0ull,<sp/>args...);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="29"><highlight class="comment">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="30"><highlight class="comment">size_t<sp/>combineHash(const<sp/>T&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>std::hash&lt;T&gt;()(val);</highlight></codeline>
<codeline lineno="32"><highlight class="comment">}</highlight></codeline>
<codeline lineno="33"><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment">size_t<sp/>combineHash(std::size_t<sp/>seed)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>seed;</highlight></codeline>
<codeline lineno="42"><highlight class="comment">}</highlight></codeline>
<codeline lineno="43"><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="53"><highlight class="comment">size_t<sp/>combineHash(size_t<sp/>seed,<sp/>const<sp/>T&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>seed<sp/>^<sp/>std::hash&lt;T&gt;()(val)<sp/>+<sp/>0x9E3779B97F4A7C15<sp/>+<sp/>(seed<sp/>&lt;&lt;<sp/>6u)<sp/>+<sp/>(seed<sp/>&gt;&gt;<sp/>2u);</highlight></codeline>
<codeline lineno="55"><highlight class="comment">}</highlight></codeline>
<codeline lineno="56"><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment">template<sp/>&lt;typename<sp/>S,<sp/>typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="67"><highlight class="comment">size_t<sp/>combineHash(const<sp/>S&amp;<sp/>val1,<sp/>const<sp/>T&amp;<sp/>val2)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>combineHash(std::hash&lt;S&gt;()(val1),<sp/>val2);</highlight></codeline>
<codeline lineno="69"><highlight class="comment">}</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment">template<sp/>&lt;typename<sp/>S,<sp/>typename<sp/>T,<sp/>typename...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="comment">size_t<sp/>combineHash(const<sp/>S&amp;<sp/>val1,<sp/>const<sp/>T&amp;<sp/>val2,<sp/>const<sp/>Args&amp;<sp/>...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>combineHash(combineHash(val1,<sp/>val2),<sp/>args...);</highlight></codeline>
<codeline lineno="89"><highlight class="comment">}</highlight></codeline>
<codeline lineno="90"><highlight class="comment">*/</highlight></codeline>
<codeline lineno="98"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="99" refid="group___u_t_i_l_s___c_o_m_b_i_n_e_h_a_s_h_1ga14c2a32c34750444fca67ed0098465d2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group___u_t_i_l_s___c_o_m_b_i_n_e_h_a_s_h_1ga14c2a32c34750444fca67ed0098465d2" kindref="member">combineHashSym</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;<sp/>...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::hash&lt;std::decay_t&lt;decltype(args)&gt;&gt;()(args)<sp/>+<sp/>...);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>We<sp/>use<sp/>two<sp/>advanced<sp/>C++<sp/>techniques<sp/>here<sp/>:</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>+<sp/>The<sp/>first<sp/>is<sp/>std::decay_t&lt;decltype(args)&gt;<sp/>which<sp/>is<sp/>used<sp/>to<sp/>determine<sp/>the<sp/>&quot;true&quot;<sp/>type</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>of<sp/>the<sp/>argument<sp/>being<sp/>treated<sp/>(without<sp/>const<sp/>reference),<sp/>so<sp/>we<sp/>can<sp/>use<sp/>the<sp/>corresponding<sp/>std::hash<sp/>;</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>+<sp/>The<sp/>second<sp/>is<sp/>a<sp/>fold<sp/>operation<sp/>(xxx<sp/>+<sp/>...),<sp/>which<sp/>is<sp/>a<sp/>way<sp/>to<sp/>apply<sp/>the<sp/>addition<sp/>operator<sp/>+<sp/>to</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>all<sp/>hashes<sp/>two-by-two.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>way<sp/>we<sp/>ensure<sp/>the<sp/>operation<sp/>is<sp/>symmetrical<sp/>in<sp/>regards<sp/>to<sp/>the<sp/>arguments<sp/>given.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>loki::hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/prog/cpp/custom_libs/loki/src/loki/hash/CombineHash.hpp"/>
  </compounddef>
</doxygen>
