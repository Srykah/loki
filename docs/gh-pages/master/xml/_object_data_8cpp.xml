<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_object_data_8cpp" kind="file" language="C++">
    <compoundname>ObjectData.cpp</compoundname>
    <includes refid="_object_data_8hpp" local="yes">ObjectData.hpp</includes>
    <incdepgraph>
      <node id="3">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="8">
        <label>filesystem</label>
      </node>
      <node id="5">
        <label>variant</label>
      </node>
      <node id="2">
        <label>ObjectData.hpp</label>
        <link refid="_object_data_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="7">
        <label>SFML/Graphics/Color.hpp</label>
      </node>
      <node id="6">
        <label>Property.hpp</label>
        <link refid="_property_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="4">
        <label>SFML/System.hpp</label>
      </node>
      <node id="1">
        <label>D:/prog/cpp/custom_libs/loki/src/loki/tiles/model/ObjectData.cpp</label>
        <link refid="_object_data_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceloki">loki</innernamespace>
    <innernamespace refid="namespaceloki_1_1tiles">loki::tiles</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Srykah </para>
</simplesect>
<simplesect kind="copyright"><para>GNU GPL v3.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_object_data_8hpp" kindref="compound">ObjectData.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">loki::tiles<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">ObjectData<sp/>loadObjectData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nlohmann::json&amp;<sp/>jsonDatum)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jsonDatum.contains(</highlight><highlight class="stringliteral">&quot;gid&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>PropertyMap<sp/>properties;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jsonDatum.contains(</highlight><highlight class="stringliteral">&quot;properties&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>loadPropertyMap(properties,<sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;properties&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TileObjectData<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;gid&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(),</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">).get&lt;std::string&gt;(),</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">).get&lt;std::string&gt;(),</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::Vector2f<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(),</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(properties),</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jsonDatum.value&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;ellipse&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EllipseObjectData<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::FloatRect<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(),</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.value(</highlight><highlight class="stringliteral">&quot;rotation&quot;</highlight><highlight class="normal">,<sp/>0.f),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jsonDatum.value&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;point&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PointObjectData<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.value(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>std::string{}),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::Vector2f<sp/>{jsonDatum.at(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;()},</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jsonDatum.contains(</highlight><highlight class="stringliteral">&quot;polygon&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>PolygonObjectData<sp/>polygonObjectData;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>vertexData<sp/>:<sp/>std::as_const(jsonDatum.at(</highlight><highlight class="stringliteral">&quot;polygon&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>polygonObjectData.vertices.emplace_back(vertexData.at(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(),<sp/>vertexData.at(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>polygonObjectData;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jsonDatum.contains(</highlight><highlight class="stringliteral">&quot;polyline&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>PolylineObjectData<sp/>polylineObjectData;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>vertexData<sp/>:<sp/>std::as_const(jsonDatum.at(</highlight><highlight class="stringliteral">&quot;polyline&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>polylineObjectData.vertices.emplace_back(vertexData.at(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(),<sp/>vertexData.at(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;());</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>polylineObjectData;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RectangleObjectData<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::FloatRect<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.at(</highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal">).get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsonDatum.value(</highlight><highlight class="stringliteral">&quot;rotation&quot;</highlight><highlight class="normal">,<sp/>0.f),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/prog/cpp/custom_libs/loki/src/loki/tiles/model/ObjectData.cpp"/>
  </compounddef>
</doxygen>
