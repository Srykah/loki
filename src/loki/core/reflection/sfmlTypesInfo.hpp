#pragma once

#include <cassert>

#include <SFML/Graphics.hpp>

#include <loki/core/reflection/basicTypesInfo.hpp>
#include <loki/core/reflection/classMacros.hpp>
#include <loki/core/reflection/enumMacros.hpp>

#define LOKI_REFLECTION_CLASS_FIELD_SF_TYPE(Class, Field) \
  std::remove_cvref_t<decltype(std::declval<Class>().get##Field())>
#define LOKI_REFLECTION_CLASS_FIELD_SF_GETTER_SETTER(Class, Field)                            \
  LOKI_REFLECTION_CLASS_FIELD_CUSTOM(                                                         \
      getTypeInfo<LOKI_REFLECTION_CLASS_FIELD_SF_TYPE(Class, Field)>(), #Field, false,        \
      [](void* obj) -> TmpObj {                                                               \
        return TmpObj::makeOwned<LOKI_REFLECTION_CLASS_FIELD_SF_TYPE(Class, Field)>(          \
            details::to<Class>(obj).get##Field());                                            \
      },                                                                                      \
      [](const void* obj) -> ConstTmpObj {                                                    \
        return ConstTmpObj::makeOwned<LOKI_REFLECTION_CLASS_FIELD_SF_TYPE(Class, Field)>(     \
            details::to<Class>(obj).get##Field());                                            \
      },                                                                                      \
      [](void* obj, void* data) {                                                             \
        details::to<Class>(obj).set##Field(                                                   \
            std::move(details::to<LOKI_REFLECTION_CLASS_FIELD_SF_TYPE(Class, Field)>(data))); \
      })
#define REFLECTION_CLASS_SF_TRANSFORMABLE(Class)                                                                    \
  LOKI_REFLECTION_CLASS_FIELD_CUSTOM(                                                                               \
      getTypeInfo<sf::Transformable>(), "transform", false,                                                         \
      [](void* obj) -> TmpObj {                                                                                     \
        return TmpObj::fromPtrNonOwned(details::from(static_cast<sf::Transformable&>(details::to<Class>(obj))));    \
      },                                                                                                            \
      [](const void* obj) -> ConstTmpObj {                                                                          \
        return ConstTmpObj::fromPtrNonOwned(                                                                        \
            details::from(static_cast<const sf::Transformable&>(details::to<Class>(obj))));                         \
      },                                                                                                            \
      [](void* obj, void* data) {                                                                                   \
        static_cast<sf::Transformable&>(details::to<Class>(obj)) = std::move(details::to<sf::Transformable>(data)); \
      })

LOKI_REFLECTION_CLASS_BEGIN(sf::Vector2f)
LOKI_REFLECTION_CLASS_FIELD(x)
LOKI_REFLECTION_CLASS_FIELD(y)
LOKI_REFLECTION_CLASS_END()

LOKI_REFLECTION_CLASS_BEGIN(sf::Vector2i)
LOKI_REFLECTION_CLASS_FIELD(x)
LOKI_REFLECTION_CLASS_FIELD(y)
LOKI_REFLECTION_CLASS_END()

LOKI_REFLECTION_CLASS_BEGIN(sf::Vector2u)
LOKI_REFLECTION_CLASS_FIELD(x)
LOKI_REFLECTION_CLASS_FIELD(y)
LOKI_REFLECTION_CLASS_END()

LOKI_REFLECTION_CLASS_BEGIN(sf::Vector3f)
LOKI_REFLECTION_CLASS_FIELD(x)
LOKI_REFLECTION_CLASS_FIELD(y)
LOKI_REFLECTION_CLASS_FIELD(z)
LOKI_REFLECTION_CLASS_END()

LOKI_REFLECTION_CLASS_BEGIN(sf::Vector3i)
LOKI_REFLECTION_CLASS_FIELD(x)
LOKI_REFLECTION_CLASS_FIELD(y)
LOKI_REFLECTION_CLASS_FIELD(z)
LOKI_REFLECTION_CLASS_END()

LOKI_REFLECTION_CLASS_BEGIN(sf::Transformable)
LOKI_REFLECTION_CLASS_FIELD_SF_GETTER_SETTER(sf::Transformable, Origin)
LOKI_REFLECTION_CLASS_FIELD_SF_GETTER_SETTER(sf::Transformable, Position)
LOKI_REFLECTION_CLASS_FIELD_SF_GETTER_SETTER(sf::Transformable, Rotation)
LOKI_REFLECTION_CLASS_FIELD_SF_GETTER_SETTER(sf::Transformable, Scale)
LOKI_REFLECTION_CLASS_END()

LOKI_REFLECTION_CLASS_BEGIN(sf::Color)
LOKI_REFLECTION_CLASS_FIELD(r)
LOKI_REFLECTION_CLASS_FIELD(g)
LOKI_REFLECTION_CLASS_FIELD(b)
LOKI_REFLECTION_CLASS_FIELD(a)
LOKI_REFLECTION_CLASS_END()

LOKI_REFLECTION_CLASS_BEGIN(sf::CircleShape)
REFLECTION_CLASS_SF_TRANSFORMABLE(sf::CircleShape)
LOKI_REFLECTION_CLASS_FIELD_SF_GETTER_SETTER(sf::CircleShape, Radius)
LOKI_REFLECTION_CLASS_FIELD_SF_GETTER_SETTER(sf::CircleShape, FillColor)
LOKI_REFLECTION_CLASS_END()

LOKI_REFLECTION_CLASS_BEGIN(sf::Time)
LOKI_REFLECTION_CLASS_FIELD_CUSTOM(
    getTypeInfo<float>(),
    "seconds",
    false,
    [](void* obj) -> TmpObj { return TmpObj::makeOwned<float>(details::to<sf::Time>(obj).asSeconds()); },
    [](const void* obj) -> ConstTmpObj {
      return ConstTmpObj::makeOwned<float>(details::to<const sf::Time>(obj).asSeconds());
    },
    [](void* obj, void* data) { details::to<sf::Time>(obj) = sf::seconds(details::to<float>(data)); })
LOKI_REFLECTION_CLASS_END()

#undef REFLECTION_CLASS_FIELD_SF_GETTER_SETTER
#undef REFLECTION_CLASS_FIELD_SF_TYPE

LOKI_REFLECTION_ENUM_BEGIN(sf::Joystick::Axis)
LOKI_REFLECTION_ENUMERATOR(X)
LOKI_REFLECTION_ENUMERATOR(Y)
LOKI_REFLECTION_ENUMERATOR(Z)
LOKI_REFLECTION_ENUMERATOR(R)
LOKI_REFLECTION_ENUMERATOR(U)
LOKI_REFLECTION_ENUMERATOR(V)
LOKI_REFLECTION_ENUMERATOR(PovX)
LOKI_REFLECTION_ENUMERATOR(PovY)
LOKI_REFLECTION_ENUM_END()

LOKI_REFLECTION_ENUM_BEGIN(sf::Mouse::Button)
LOKI_REFLECTION_ENUMERATOR(Left)
LOKI_REFLECTION_ENUMERATOR(Right)
LOKI_REFLECTION_ENUMERATOR(Middle)
LOKI_REFLECTION_ENUMERATOR(XButton1)
LOKI_REFLECTION_ENUMERATOR(XButton2)
LOKI_REFLECTION_ENUMERATOR(ButtonCount)
LOKI_REFLECTION_ENUM_END()

LOKI_REFLECTION_ENUM_BEGIN(sf::Keyboard::Scancode)
LOKI_REFLECTION_ENUMERATOR(Unknown)
LOKI_REFLECTION_ENUMERATOR(A)
LOKI_REFLECTION_ENUMERATOR(B)
LOKI_REFLECTION_ENUMERATOR(C)
LOKI_REFLECTION_ENUMERATOR(D)
LOKI_REFLECTION_ENUMERATOR(E)
LOKI_REFLECTION_ENUMERATOR(F)
LOKI_REFLECTION_ENUMERATOR(G)
LOKI_REFLECTION_ENUMERATOR(H)
LOKI_REFLECTION_ENUMERATOR(I)
LOKI_REFLECTION_ENUMERATOR(J)
LOKI_REFLECTION_ENUMERATOR(K)
LOKI_REFLECTION_ENUMERATOR(L)
LOKI_REFLECTION_ENUMERATOR(M)
LOKI_REFLECTION_ENUMERATOR(N)
LOKI_REFLECTION_ENUMERATOR(O)
LOKI_REFLECTION_ENUMERATOR(P)
LOKI_REFLECTION_ENUMERATOR(Q)
LOKI_REFLECTION_ENUMERATOR(R)
LOKI_REFLECTION_ENUMERATOR(S)
LOKI_REFLECTION_ENUMERATOR(T)
LOKI_REFLECTION_ENUMERATOR(U)
LOKI_REFLECTION_ENUMERATOR(V)
LOKI_REFLECTION_ENUMERATOR(W)
LOKI_REFLECTION_ENUMERATOR(X)
LOKI_REFLECTION_ENUMERATOR(Y)
LOKI_REFLECTION_ENUMERATOR(Z)
LOKI_REFLECTION_ENUMERATOR(Num1)
LOKI_REFLECTION_ENUMERATOR(Num2)
LOKI_REFLECTION_ENUMERATOR(Num3)
LOKI_REFLECTION_ENUMERATOR(Num4)
LOKI_REFLECTION_ENUMERATOR(Num5)
LOKI_REFLECTION_ENUMERATOR(Num6)
LOKI_REFLECTION_ENUMERATOR(Num7)
LOKI_REFLECTION_ENUMERATOR(Num8)
LOKI_REFLECTION_ENUMERATOR(Num9)
LOKI_REFLECTION_ENUMERATOR(Num0)
LOKI_REFLECTION_ENUMERATOR(Enter)
LOKI_REFLECTION_ENUMERATOR(Escape)
LOKI_REFLECTION_ENUMERATOR(Backspace)
LOKI_REFLECTION_ENUMERATOR(Tab)
LOKI_REFLECTION_ENUMERATOR(Space)
LOKI_REFLECTION_ENUMERATOR(Hyphen)
LOKI_REFLECTION_ENUMERATOR(Equal)
LOKI_REFLECTION_ENUMERATOR(LBracket)
LOKI_REFLECTION_ENUMERATOR(RBracket)
LOKI_REFLECTION_ENUMERATOR(Backslash)
LOKI_REFLECTION_ENUMERATOR(Semicolon)
LOKI_REFLECTION_ENUMERATOR(Apostrophe)
LOKI_REFLECTION_ENUMERATOR(Grave)
LOKI_REFLECTION_ENUMERATOR(Comma)
LOKI_REFLECTION_ENUMERATOR(Period)
LOKI_REFLECTION_ENUMERATOR(Slash)
LOKI_REFLECTION_ENUMERATOR(F1)
LOKI_REFLECTION_ENUMERATOR(F2)
LOKI_REFLECTION_ENUMERATOR(F3)
LOKI_REFLECTION_ENUMERATOR(F4)
LOKI_REFLECTION_ENUMERATOR(F5)
LOKI_REFLECTION_ENUMERATOR(F6)
LOKI_REFLECTION_ENUMERATOR(F7)
LOKI_REFLECTION_ENUMERATOR(F8)
LOKI_REFLECTION_ENUMERATOR(F9)
LOKI_REFLECTION_ENUMERATOR(F10)
LOKI_REFLECTION_ENUMERATOR(F11)
LOKI_REFLECTION_ENUMERATOR(F12)
LOKI_REFLECTION_ENUMERATOR(F13)
LOKI_REFLECTION_ENUMERATOR(F14)
LOKI_REFLECTION_ENUMERATOR(F15)
LOKI_REFLECTION_ENUMERATOR(F16)
LOKI_REFLECTION_ENUMERATOR(F17)
LOKI_REFLECTION_ENUMERATOR(F18)
LOKI_REFLECTION_ENUMERATOR(F19)
LOKI_REFLECTION_ENUMERATOR(F20)
LOKI_REFLECTION_ENUMERATOR(F21)
LOKI_REFLECTION_ENUMERATOR(F22)
LOKI_REFLECTION_ENUMERATOR(F23)
LOKI_REFLECTION_ENUMERATOR(F24)
LOKI_REFLECTION_ENUMERATOR(CapsLock)
LOKI_REFLECTION_ENUMERATOR(PrintScreen)
LOKI_REFLECTION_ENUMERATOR(ScrollLock)
LOKI_REFLECTION_ENUMERATOR(Pause)
LOKI_REFLECTION_ENUMERATOR(Insert)
LOKI_REFLECTION_ENUMERATOR(Home)
LOKI_REFLECTION_ENUMERATOR(PageUp)
LOKI_REFLECTION_ENUMERATOR(Delete)
LOKI_REFLECTION_ENUMERATOR(End)
LOKI_REFLECTION_ENUMERATOR(PageDown)
LOKI_REFLECTION_ENUMERATOR(Right)
LOKI_REFLECTION_ENUMERATOR(Left)
LOKI_REFLECTION_ENUMERATOR(Down)
LOKI_REFLECTION_ENUMERATOR(Up)
LOKI_REFLECTION_ENUMERATOR(NumLock)
LOKI_REFLECTION_ENUMERATOR(NumpadDivide)
LOKI_REFLECTION_ENUMERATOR(NumpadMultiply)
LOKI_REFLECTION_ENUMERATOR(NumpadMinus)
LOKI_REFLECTION_ENUMERATOR(NumpadPlus)
LOKI_REFLECTION_ENUMERATOR(NumpadEqual)
LOKI_REFLECTION_ENUMERATOR(NumpadEnter)
LOKI_REFLECTION_ENUMERATOR(NumpadDecimal)
LOKI_REFLECTION_ENUMERATOR(Numpad1)
LOKI_REFLECTION_ENUMERATOR(Numpad2)
LOKI_REFLECTION_ENUMERATOR(Numpad3)
LOKI_REFLECTION_ENUMERATOR(Numpad4)
LOKI_REFLECTION_ENUMERATOR(Numpad5)
LOKI_REFLECTION_ENUMERATOR(Numpad6)
LOKI_REFLECTION_ENUMERATOR(Numpad7)
LOKI_REFLECTION_ENUMERATOR(Numpad8)
LOKI_REFLECTION_ENUMERATOR(Numpad9)
LOKI_REFLECTION_ENUMERATOR(Numpad0)
LOKI_REFLECTION_ENUMERATOR(NonUsBackslash)
LOKI_REFLECTION_ENUMERATOR(Application)
LOKI_REFLECTION_ENUMERATOR(Execute)
LOKI_REFLECTION_ENUMERATOR(ModeChange)
LOKI_REFLECTION_ENUMERATOR(Help)
LOKI_REFLECTION_ENUMERATOR(Menu)
LOKI_REFLECTION_ENUMERATOR(Select)
LOKI_REFLECTION_ENUMERATOR(Redo)
LOKI_REFLECTION_ENUMERATOR(Undo)
LOKI_REFLECTION_ENUMERATOR(Cut)
LOKI_REFLECTION_ENUMERATOR(Copy)
LOKI_REFLECTION_ENUMERATOR(Paste)
LOKI_REFLECTION_ENUMERATOR(VolumeMute)
LOKI_REFLECTION_ENUMERATOR(VolumeUp)
LOKI_REFLECTION_ENUMERATOR(VolumeDown)
LOKI_REFLECTION_ENUMERATOR(MediaPlayPause)
LOKI_REFLECTION_ENUMERATOR(MediaStop)
LOKI_REFLECTION_ENUMERATOR(MediaNextTrack)
LOKI_REFLECTION_ENUMERATOR(MediaPreviousTrack)
LOKI_REFLECTION_ENUMERATOR(LControl)
LOKI_REFLECTION_ENUMERATOR(LShift)
LOKI_REFLECTION_ENUMERATOR(LAlt)
LOKI_REFLECTION_ENUMERATOR(LSystem)
LOKI_REFLECTION_ENUMERATOR(RControl)
LOKI_REFLECTION_ENUMERATOR(RShift)
LOKI_REFLECTION_ENUMERATOR(RAlt)
LOKI_REFLECTION_ENUMERATOR(RSystem)
LOKI_REFLECTION_ENUMERATOR(Back)
LOKI_REFLECTION_ENUMERATOR(Forward)
LOKI_REFLECTION_ENUMERATOR(Refresh)
LOKI_REFLECTION_ENUMERATOR(Stop)
LOKI_REFLECTION_ENUMERATOR(Search)
LOKI_REFLECTION_ENUMERATOR(Favorites)
LOKI_REFLECTION_ENUMERATOR(HomePage)
LOKI_REFLECTION_ENUMERATOR(LaunchApplication1)
LOKI_REFLECTION_ENUMERATOR(LaunchApplication2)
LOKI_REFLECTION_ENUMERATOR(LaunchMail)
LOKI_REFLECTION_ENUMERATOR(LaunchMediaSelect)
LOKI_REFLECTION_ENUM_END()
